import { useRouter } from 'expo-router';
import React, { useState } from 'react';
import { getPlatformContainerStyle } from '../utils/platformUtils';
import { View, Text, TextInput, TouchableOpacity, StyleSheet, Image, Alert } from 'react-native';
import { useAuthStore } from '../store/useAuthStore';
import { updateProfile, uploadAvatar } from '../services/authApi';
import { getUserAddresses, updateAddress } from '../services/addressApi';
import { useTheme } from '../store/ThemeContext';
import { LightColors, DarkColors } from '../constants/Colors';
import * as ImagePicker from 'expo-image-picker';

const EditProfileScreen: React.FC = () => {
  const user = useAuthStore((state) => state.user);
  const setUser = useAuthStore((state) => state.setUser);
  const token = useAuthStore((state) => state.token);
  const [name, setName] = useState(user?.name || '');
  const [email, setEmail] = useState(user?.email || '');
  // Chu·∫©n h√≥a s·ªë ƒëi·ªán tho·∫°i v·ªÅ format VN: 0XXXXXXXXX (10 s·ªë)
  function formatPhone(raw: string | undefined): string {
    if (!raw) return '';
    const p = raw.replace(/\s+/g, '');
    if (/^0\d{9}$/.test(p)) return p;
    if (/^\+84\d{9}$/.test(p)) return '0' + p.slice(3); // Chuy·ªÉn +84 th√†nh 0
    if (/^\d{9}$/.test(p)) return '0' + p; // nh·∫≠p thi·∫øu s·ªë 0 ƒë·∫ßu
    return p;
  }
  const [phone, setPhone] = useState(user?.phoneNumber || '');
  const [phoneError, setPhoneError] = useState('');
  // Th√™m d√≤ng n√†y ƒë·ªÉ fix l·ªói avatarUrl ch∆∞a khai b√°o
  const [avatarUrl, setAvatarUrl] = useState(user?.avatarUrl || '');
  const [isUploading, setIsUploading] = useState(false);
  // X√≥a tr∆∞·ªùng address v√¨ API kh√¥ng h·ªó tr·ª£
  // const [address, setAddress] = useState(user?.address || '');
  const router = useRouter();
  const { theme } = useTheme();
  const isDark = theme === 'dark';
  const colors = isDark ? DarkColors : LightColors;



  const handleSave = async () => {

    let phoneToSave = formatPhone(phone.trim());
   
    if (!user || !user._id || !token) {
      Alert.alert('Th√¥ng b√°o', 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng');
      return;
    }
    
    if (isUploading) {
      Alert.alert('ƒêang x·ª≠ l√Ω', 'Vui l√≤ng ƒë·ª£i upload ·∫£nh ho√†n t·∫•t');
      return;
    }
    
    try {
      let finalAvatarUrl = avatarUrl;
      
      // N·∫øu c√≥ avatar m·ªõi (kh√¥ng ph·∫£i t·ª´ server), upload l√™n server tr∆∞·ªõc
      if (avatarUrl && (avatarUrl.startsWith('file://') || avatarUrl.startsWith('content://'))) {
        try {
          setIsUploading(true);
          console.log('üîÑ ƒêang upload avatar...');
          const uploadRes = await uploadAvatar(token, avatarUrl);
          finalAvatarUrl = uploadRes.data.imageUrl;
          console.log('‚úÖ Upload avatar th√†nh c√¥ng:', finalAvatarUrl);
        } catch (uploadErr: any) {
          console.error('‚ùå Upload avatar error:', uploadErr?.response?.data || uploadErr?.message || uploadErr);
          const errorMessage = uploadErr?.response?.data?.message || uploadErr?.message || 'Kh√¥ng th·ªÉ upload ·∫£nh';
          Alert.alert(
            'L·ªói upload ·∫£nh', 
            `${errorMessage}\n\nVui l√≤ng ki·ªÉm tra:\n‚Ä¢ K·∫øt n·ªëi internet\n‚Ä¢ K√≠ch th∆∞·ªõc ·∫£nh (t·ªëi ƒëa 5MB)\n‚Ä¢ ƒê·ªãnh d·∫°ng ·∫£nh (JPG, PNG)`,
            [{ text: 'OK' }]
          );
          return;
        } finally {
          setIsUploading(false);
        }
      }
      
      // C·∫≠p nh·∫≠t th√¥ng tin user
      const res = await updateProfile(token, { 
        name, 
        email, 
        phoneNumber: phoneToSave, 
        avatarUrl: finalAvatarUrl 
      });
      setUser(res.data.user);

      // ƒê·ªìng b·ªô th√¥ng tin v·ªõi ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh
      try {
        const addresses = await getUserAddresses(token);
        const defaultAddress = addresses.find(addr => addr.isDefault);
        
        if (defaultAddress && defaultAddress._id) {
          // C·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh v·ªõi th√¥ng tin m·ªõi
          await updateAddress(token, defaultAddress._id, {
            name: name.trim(),
            phone: phoneToSave,
            address: defaultAddress.address,
            province: defaultAddress.province,
            district: defaultAddress.district,
            ward: defaultAddress.ward,
            isDefault: true
          });
          console.log('‚úÖ ƒê√£ ƒë·ªìng b·ªô th√¥ng tin v·ªõi ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh');
        }
      } catch (addressErr: any) {
        console.log('Address sync error:', addressErr?.response?.data || addressErr?.message || addressErr);
        // Kh√¥ng hi·ªÉn th·ªã l·ªói cho user v√¨ c·∫≠p nh·∫≠t profile ƒë√£ th√†nh c√¥ng
      }

      Alert.alert('Th√†nh c√¥ng', 'Th√¥ng tin ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v√† ƒë·ªìng b·ªô v·ªõi ƒë·ªãa ch·ªâ giao h√†ng', [
        {
          text: 'OK',
          onPress: () => router.back()
        }
      ]);
    } catch (err: any) {
      console.log('Update profile error:', err?.response?.data || err?.message || err);
      Alert.alert('L·ªói', err?.response?.data?.message || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin');
    }
  };

  const handleCancel = () => {
    router.replace('/profile');
  };
  const handleChangePassword = () => {
    router.push('./change-password');
  };

  const handlePickAvatar = async () => {
    try {
      const permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync();
      if (!permissionResult.granted) {
        Alert.alert(
          'Quy·ªÅn truy c·∫≠p c·∫ßn thi·∫øt', 
          'B·∫°n c·∫ßn cho ph√©p truy c·∫≠p th∆∞ vi·ªán ·∫£nh ƒë·ªÉ ch·ªçn ·∫£nh ƒë·∫°i di·ªán!',
          [
            { text: 'H·ªßy', style: 'cancel' },
            { text: 'C√†i ƒë·∫∑t', onPress: () => ImagePicker.requestMediaLibraryPermissionsAsync() }
          ]
        );
        return;
      }

      const result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        aspect: [1, 1],
        quality: 0.7,
        allowsMultipleSelection: false,
      });

      if (!result.canceled && result.assets && result.assets.length > 0) {
        const selectedImage = result.assets[0];
        console.log('üì∏ Selected image:', selectedImage);
        
        // Ki·ªÉm tra k√≠ch th∆∞·ªõc file (n·∫øu c√≥)
        if (selectedImage.fileSize && selectedImage.fileSize > 5 * 1024 * 1024) {
          Alert.alert(
            '·∫¢nh qu√° l·ªõn', 
            'K√≠ch th∆∞·ªõc ·∫£nh kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 5MB. Vui l√≤ng ch·ªçn ·∫£nh nh·ªè h∆°n.',
            [{ text: 'OK' }]
          );
          return;
        }
        
        setAvatarUrl(selectedImage.uri);
        console.log('‚úÖ Avatar URL set:', selectedImage.uri);
      }
    } catch (error: any) {
      console.error('‚ùå Error picking image:', error);
      Alert.alert(
        'L·ªói ch·ªçn ·∫£nh', 
        'Kh√¥ng th·ªÉ m·ªü th∆∞ vi·ªán ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i.',
        [{ text: 'OK' }]
      );
    }
  };

  // Ki·ªÉm tra authentication
  if (!token) {
    return (
      <View style={[styles.container, getPlatformContainerStyle(), { backgroundColor: colors.background }]}>
        {/* Header */}
        <View style={styles.headerContainer}>
          <TouchableOpacity onPress={() => router.replace('/profile')}>
            <Text style={[styles.backButton, { color: colors.text }]}>‚Äπ</Text>
          </TouchableOpacity>
          <Text style={[styles.header, { color: colors.text }]}>Ch·ªânh s·ª≠a h·ªì s∆°</Text>
          <View style={styles.placeholder} />
        </View>
        
        {/* Authentication Required */}
        <View style={[styles.authRequiredContainer, { backgroundColor: colors.card }]}>
          <Text style={[styles.authRequiredIcon, { color: colors.textSecondary }]}>üîí</Text>
          <Text style={[styles.authRequiredTitle, { color: colors.text }]}>Y√™u c·∫ßu ƒëƒÉng nh·∫≠p</Text>
          <Text style={[styles.authRequiredMessage, { color: colors.textSecondary }]}>
            Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ch·ªânh s·ª≠a th√¥ng tin c√° nh√¢n
          </Text>
          <TouchableOpacity
            style={[styles.authRequiredButton, { backgroundColor: colors.accent }]}
            onPress={() => router.push('/(auth)/sign-in')}
          >
            <Text style={[styles.authRequiredButtonText, { color: '#fff' }]}>ƒêƒÉng nh·∫≠p</Text>
          </TouchableOpacity>
        </View>
      </View>
    );
  }

  return (
    <View style={[styles.container, getPlatformContainerStyle(), { backgroundColor: colors.background }]}>
      {/* Header */}
      <View style={styles.headerContainer}>
        <TouchableOpacity onPress={() => router.replace('/profile')}>
          <Text style={[styles.backButton, { color: colors.text }]}>‚Äπ</Text>
        </TouchableOpacity>
        <Text style={[styles.header, { color: colors.text }]}>Ch·ªânh s·ª≠a h·ªì s∆°</Text>
        <View style={styles.placeholder} />
      </View>
      {/* Profile Avatar */}
      <View style={styles.profileHeader}>
        <View style={styles.avatarContainer}>
          <Image source={avatarUrl ? { uri: avatarUrl } : require('../assets/images/avatar.png')} style={styles.avatar} />
          <TouchableOpacity style={[styles.cameraButton, { backgroundColor: colors.card, borderColor: colors.border }]} onPress={handlePickAvatar}>
            <Image source={require('../assets/images/camera.png')} style={styles.cameraImage} />
          </TouchableOpacity>
        </View>
      </View>

      {/* Form */}
      <View style={styles.formContainer}>
        <Text style={[styles.label, { color: colors.text }]}>T√™n ng∆∞·ªùi d√πng</Text>
        <TextInput
          style={[styles.input, { color: colors.text, borderBottomColor: colors.border }]}
          value={name}
          onChangeText={setName}
          placeholder="Nh·∫≠p t√™n c·ªßa b·∫°n"
          placeholderTextColor={colors.textSecondary}
        />

        <Text style={[styles.label, { color: colors.text }]}>Email</Text>
        <TextInput
          style={[styles.input, { color: colors.text, borderBottomColor: colors.border }]}
          value={email}
          onChangeText={setEmail}
          placeholder="Nh·∫≠p email c·ªßa b·∫°n"
          keyboardType="email-address"
          placeholderTextColor={colors.textSecondary}
        />
        <Text style={[styles.label, { color: colors.text }]}>S·ªë ƒëi·ªán tho·∫°i</Text>
        <TextInput
          style={[styles.input, { color: colors.text, borderBottomColor: colors.border }]}
          value={phone}
          onChangeText={(text) => {
            // Ch·ªâ cho ph√©p nh·∫≠p s·ªë v√† gi·ªõi h·∫°n ƒë·ªô d√†i
            const numericText = text.replace(/[^0-9]/g, '');
            if (numericText.length <= 11) {
              setPhone(numericText);
            }
          }}
          placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i c·ªßa b·∫°n"
          keyboardType="phone-pad"
          placeholderTextColor={colors.textSecondary}
          maxLength={11}
        />


        {phoneError ? <Text style={{ color: 'red', marginBottom: 8 }}>{phoneError}</Text> : null}

        {/* Change Password */}
        <TouchableOpacity style={[styles.passwordRow, { borderBottomColor: colors.border }]} onPress={handleChangePassword}>
          <Text style={[styles.passwordLabel, { color: colors.text }]}>ƒê·ªïi m·∫≠t kh·∫©u</Text>
          <Text style={[styles.arrow, { color: colors.textSecondary }]}>{'>'}</Text>
        </TouchableOpacity>
      </View>

      {/* Buttons */}
      <View style={styles.buttons}>
        <TouchableOpacity style={[styles.cancelButton, { backgroundColor: colors.accent, borderColor: colors.border }]} onPress={handleCancel}>
          <Text style={[styles.cancelButtonText, { color: '#fff' }]}>H·ªßy</Text>
        </TouchableOpacity>
        <TouchableOpacity 
          style={[
            styles.saveButton, 
            { 
              backgroundColor: isUploading ? colors.textSecondary : (isDark ? colors.text : '#404040'),
              opacity: isUploading ? 0.7 : 1
            }
          ]} 
          onPress={handleSave}
          disabled={isUploading}
        >
          <Text style={[styles.saveButtonText, { color: isDark ? colors.background : '#fff' }]}>
            {isUploading ? 'ƒêang l∆∞u...' : 'L∆∞u'}
          </Text>
        </TouchableOpacity>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    paddingHorizontal: 24,
    paddingTop: 50,
  },
  headerContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginBottom: 30,
  },
  backButton: {
    fontSize: 24,
    fontWeight: 'bold',
  },
  header: {
    fontSize: 18,
    fontWeight: '600',
  },
  placeholder: {
    width: 24,
  },
  profileHeader: {
    alignItems: 'center',
    marginBottom: 40,
  },
  avatarContainer: {
    position: 'relative',
  },
  avatar: {
    width: 100,
    height: 100,
    borderRadius: 50,
  },
  cameraButton: {
    position: 'absolute',
    bottom: 0,
    right: 0,
    backgroundColor: '#fff',
    borderRadius: 15,
    padding: 8,
    borderWidth: 2,
    borderColor: '#e9ecef',
  },
  cameraImage: {
    width: 16,
    height: 16,
  },
  formContainer: {
    flex: 1,
  },
  label: {
    fontSize: 14,
    marginBottom: 8,
    fontWeight: '600',
  },
  input: {
    borderBottomWidth: 1,
    paddingVertical: 12,
    marginBottom: 24,
    fontSize: 16,
  },
  passwordRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    borderBottomWidth: 1,
    borderBottomColor: '#e9ecef',
    paddingVertical: 16,
    marginBottom: 40,
  },
  passwordLabel: {
    fontSize: 16,
  },
  arrow: {
    fontSize: 18,
  },
  buttons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 100, // Tr√°nh b·ªã che b·ªüi bottom tabs
    gap: 12,
  },
  cancelButton: {
    padding: 16,
    flex: 1,
    alignItems: 'center',
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#e9ecef',
  },
  saveButton: {
    backgroundColor: '#404040',
    padding: 16,
    flex: 1,
    alignItems: 'center',
    borderRadius: 8,
  },
  cancelButtonText: {
    color: '#FFFFFF',
    fontWeight: '600',
    fontSize: 16,
  },
  saveButtonText: {
    color: '#fff',
    fontWeight: '600',
    fontSize: 16,
  },
  // Authentication required styles
  authRequiredContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 24,
  },
  authRequiredIcon: {
    fontSize: 64,
    marginBottom: 16,
  },
  authRequiredTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 8,
    textAlign: 'center',
  },
  authRequiredMessage: {
    fontSize: 16,
    textAlign: 'center',
    marginBottom: 24,
    lineHeight: 22,
  },
  authRequiredButton: {
    paddingHorizontal: 32,
    paddingVertical: 12,
    borderRadius: 8,
    minWidth: 150,
  },
  authRequiredButtonText: {
    fontSize: 16,
    fontWeight: '600',
    textAlign: 'center',
  },
});

export default EditProfileScreen;
