import { API_CONFIG } from './config';

export interface AdministrativeOption {
  code: string;
  name: string;
} 

export interface AddressData {
  provinces: AdministrativeOption[];
  districts: Record<string, AdministrativeOption[]>;
  wards: Record<string, AdministrativeOption[]>;
}

// L·∫•y danh s√°ch t·ªânh/th√†nh ph·ªë
export const getProvinces = async (): Promise<AdministrativeOption[]> => {
  try {
    console.log('üåç AdministrativeAPI - Fetching provinces...');
    const response = await fetch(`${API_CONFIG.BASE_URL}/administrative/provinces`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      }
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    console.log('üåç AdministrativeAPI - Provinces response:', data.results, 'items');
    return data.data || [];
  } catch (error) {
    console.error('‚ùå AdministrativeAPI - Error fetching provinces:', error);
    throw new Error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch t·ªânh/th√†nh ph·ªë');
  }
};

// L·∫•y danh s√°ch qu·∫≠n/huy·ªán theo t·ªânh
export const getDistrictsByProvince = async (provinceCode: string): Promise<AdministrativeOption[]> => {
  try {
    console.log('üèòÔ∏è AdministrativeAPI - Fetching districts for province:', provinceCode);
    const response = await fetch(`${API_CONFIG.BASE_URL}/administrative/districts/${provinceCode}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      }
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    console.log('üèòÔ∏è AdministrativeAPI - Districts response:', data.results, 'items');
    return data.data || [];
  } catch (error) {
    console.error('‚ùå AdministrativeAPI - Error fetching districts:', error);
    throw new Error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch qu·∫≠n/huy·ªán');
  }
};

// L·∫•y danh s√°ch ph∆∞·ªùng/x√£ theo qu·∫≠n/huy·ªán
export const getWardsByDistrict = async (districtCode: string): Promise<AdministrativeOption[]> => {
  try {
    console.log('üè† AdministrativeAPI - Fetching wards for district:', districtCode);
    const response = await fetch(`${API_CONFIG.BASE_URL}/administrative/wards/${districtCode}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      }
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    console.log('üè† AdministrativeAPI - Wards response:', data.results, 'items');
    return data.data || [];
  } catch (error) {
    console.error('‚ùå AdministrativeAPI - Error fetching wards:', error);
    throw new Error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch ph∆∞·ªùng/x√£');
  }
};

// L·∫•y t·∫•t c·∫£ d·ªØ li·ªáu ƒë·ªãa ch·ªâ (cho cache)
export const getAllAddressData = async (): Promise<AddressData> => {
  try {
    console.log('üó∫Ô∏è AdministrativeAPI - Fetching all address data...');
    const response = await fetch(`${API_CONFIG.BASE_URL}/administrative/all`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      }
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    console.log('üó∫Ô∏è AdministrativeAPI - All address data response:', {
      provinces: data.data.provinces?.length || 0,
      districts: Object.keys(data.data.districts || {}).length,
      wards: Object.keys(data.data.wards || {}).length
    });
    
    return data.data || { provinces: [], districts: {}, wards: {} };
  } catch (error) {
    console.error('‚ùå AdministrativeAPI - Error fetching all address data:', error);
    throw new Error('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu ƒë·ªãa ch·ªâ');
  }
};