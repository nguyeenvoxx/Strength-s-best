// services/paymentApi.ts
import axios from 'axios';
import { API_CONFIG } from '../constants/config';
import { useAuthStore } from '../store/useAuthStore';

// H√†m t·∫°o ƒë∆°n h√†ng t·ª´ gi·ªè h√†ng
export const createOrderFromCart = async (items: any[], shippingInfo: any, voucherCode?: string) => {
  const token = useAuthStore.getState().token;
  
  if (!token) {
    throw new Error('Token kh√¥ng t·ªìn t·∫°i');
  }

  try {
    console.log('üîç Creating order from cart:', { itemsCount: items.length, shippingInfo });

    const res = await axios.post(
      `${API_CONFIG.BASE_URL}/api/v1/payments/create-order`,
      { 
        items, 
        shippingInfo, 
        voucherCode 
      },
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    );

    console.log('‚úÖ Order created successfully:', res.data);
    return res.data;
  } catch (error: any) {
    console.error('‚ùå Error creating order:', error);
    throw new Error(error?.response?.data?.message || 'L·ªói t·∫°o ƒë∆°n h√†ng');
  }
};

// H√†m t·∫°o thanh to√°n VNPay QR
export const createVnpayPayment = async (amount: number, orderId: string, orderInfo?: string) => {
  const token = useAuthStore.getState().token;
  
  if (!token) {
    throw new Error('Token kh√¥ng t·ªìn t·∫°i');
  }

  try {
    console.log('üîç Creating VNPay payment:', { amount, orderId });

    const res = await axios.post(
      `${API_CONFIG.BASE_URL}/api/v1/payments/vnpay`,
      { 
        amount, 
        orderId, 
        orderInfo: orderInfo || `Thanh to√°n ƒë∆°n h√†ng #${orderId}` 
      },
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    );

    console.log('‚úÖ VNPay payment created successfully:', res.data);
    return res.data;
  } catch (error: any) {
    console.error('‚ùå Error creating VNPay payment:', error);
    throw new Error(error?.response?.data?.message || 'L·ªói t·∫°o thanh to√°n VNPay');
  }
};

// H√†m t·∫°o thanh to√°n MoMo QR
export const createMomoPayment = async (amount: number, orderId: string, orderInfo?: string) => {
  const token = useAuthStore.getState().token;
  
  if (!token) {
    throw new Error('Token kh√¥ng t·ªìn t·∫°i');
  }

  try {
    console.log('üîç Creating MoMo payment:', { amount, orderId });

    const res = await axios.post(
      `${API_CONFIG.BASE_URL}/api/v1/payments/momo`,
      { 
        amount, 
        orderId, 
        orderInfo: orderInfo || `Thanh to√°n ƒë∆°n h√†ng #${orderId}` 
      },
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    );

    console.log('‚úÖ MoMo payment created successfully:', res.data);
    return res.data;
  } catch (error: any) {
    console.error('‚ùå Error creating MoMo payment:', error);
    throw new Error(error?.response?.data?.message || 'L·ªói t·∫°o thanh to√°n MoMo');
  }
};

// H√†m t·∫°o thanh to√°n t·ª´ gi·ªè h√†ng
export const createPaymentFromCart = async (typePayment: 'vnpay' | 'momo' | 'cod', items: any[], shippingInfo: any, voucherCode?: string) => {
  const token = useAuthStore.getState().token;
  
  if (!token) {
    throw new Error('Token kh√¥ng t·ªìn t·∫°i');
  }

  try {
    console.log('üîç Creating payment from cart:', { typePayment, itemsCount: items.length });

    const res = await axios.post(
      `${API_CONFIG.BASE_URL}/api/v1/payments/from-cart`,
      { 
        typePayment, 
        items, 
        shippingInfo, 
        voucherCode 
      },
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    );

    console.log('‚úÖ Payment from cart created successfully:', res.data);
    return res.data;
  } catch (error: any) {
    console.error('‚ùå Error creating payment from cart:', error);
    throw new Error(error?.response?.data?.message || 'L·ªói t·∫°o thanh to√°n t·ª´ gi·ªè h√†ng');
  }
};

// H√†m l·∫•y th√¥ng tin thanh to√°n
export const getPaymentInfo = async (paymentId: string) => {
  const token = useAuthStore.getState().token;
  
  if (!token) {
    throw new Error('Token kh√¥ng t·ªìn t·∫°i');
  }

  try {
    console.log('üîç Getting payment info:', paymentId);

    const res = await axios.get(
      `${API_CONFIG.BASE_URL}/api/v1/payments/detail/${paymentId}`,
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    );

    console.log('‚úÖ Payment info retrieved successfully:', res.data);
    return res.data;
  } catch (error: any) {
    console.error('‚ùå Error getting payment info:', error);
    throw new Error(error?.response?.data?.message || 'L·ªói l·∫•y th√¥ng tin thanh to√°n');
  }
};

// H√†m l·∫•y danh s√°ch thanh to√°n c·ªßa user
export const getMyPayments = async () => {
  const token = useAuthStore.getState().token;
  
  if (!token) {
    throw new Error('Token kh√¥ng t·ªìn t·∫°i');
  }

  try {
    console.log('üîç Getting my payments');

    const res = await axios.get(
      `${API_CONFIG.BASE_URL}/api/v1/payments/my-payments`,
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    );

    console.log('‚úÖ My payments retrieved successfully:', res.data);
    return res.data;
  } catch (error: any) {
    console.error('‚ùå Error getting my payments:', error);
    throw new Error(error?.response?.data?.message || 'L·ªói l·∫•y danh s√°ch thanh to√°n');
  }
};

// H√†m x√≥a t·∫•t c·∫£ s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
export const clearCartItems = async () => {
  const token = useAuthStore.getState().token;
  
  if (!token) {
    throw new Error('Token kh√¥ng t·ªìn t·∫°i');
  }

  try {
    console.log('üîç Clearing cart items');

    const res = await axios.delete(
      `${API_CONFIG.BASE_URL}/api/v1/carts/clear`,
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    );

    console.log('‚úÖ Cart cleared successfully:', res.data);
    return res.data;
  } catch (error: any) {
    console.error('‚ùå Error clearing cart:', error);
    throw new Error(error?.response?.data?.message || 'L·ªói x√≥a gi·ªè h√†ng');
  }
};